namespace fsm.{{ fsm.name | string.downcase }};

using Stater.StateMachine.Lib;

{{ if settings.generate_states ~}}
public enum States {
    {{- for item in fsm.states }}
    {{ item.name }}{{- if !for.last }}{{ "," }}{{- end }}
    {{- end }}
}

{{ end }}
{{- func state(name) -}}
{{- if settings.generate_states -}}
States.{{ name }}
{{- else -}}
"{{ name }}"
{{- end -}}
{{- end -}}
{{- if settings.generate_context ~}}
public class {{ fsm.name }}FSMContext : IContext{
{{- for item in fsm.variables }}
    public {{ convert_variable_type item.start_value }} {{ item.name }} = {{ convert_variable_value item.start_value }};
{{- end}}
}

{{ end -}}
{{- if !settings.generate_states; state_generic = "String"; else; state_generic = "States"; end }}
{{- if !settings.generate_context; context_generic = "EmptyContext"; else; context_generic = fsm.name+"FSMContext"; end -}}
{{- if settings.mode == "Clazz" ~}}
public class {{ fsm.name }}StateMachine() : StaterStateMachine<{{ state_generic }}, {{ context_generic }}>(
    new List<Transition<{{ state_generic }}, {{ context_generic }}>>
    {
    {{- for item in fsm.state_transitions }}
        new(
            "{{ item.transition.name }}",
            {{ state item.start_state.name }},
            {{ state item.end_state.name }} {{- if item.transition.condition && settings.generate_context }},
            ctx => {{ convert_condition item.transition item.transition.condition }} {{- else }}, 
            ctx => true
            {{- end }}{{- if item.transition.event && settings.generate_context }},
            ctx => {{ convert_event item.transition item.transition.event }} {{- else }}, 
            ctx => { }
            {{- end }}
        ){{- if !for.last }}{{ "," }}{{- end }}
    {{- end }}
    },
    new {{ context_generic }}(),
    {{- if fsm.start_state != null }}
    {{ state fsm.start_state.name }}
    {{- else }}null{{ end }}
)
{
{{- if settings.generate_interface }}
    {{- for item in fsm.transitions }}
    public void {{ item.name }}() 
    {
        Transition("{{ item.name }}");
    }{{- if !for.last }}{{ "\n" }}{{- end }}
    {{- end }}
{{- end }}
}
{{- else if settings.mode == "Builder" -}}
public class {{fsm.name}} {
{{~ if settings.generate_interface ~}}
    public class Types{{ fsm.name }}StateMachine(
        List<Transition<{{ state_generic }}, {{ context_generic }}>> transitions,
        {{ context_generic }} context,
        {{ state_generic }} startState,
        HashSet<{{ state_generic }}> states,
        Dictionary<String, List<TransitionMiddleware<{{ context_generic }}>>> transitionMiddlewares,
        List<TransitionNameMiddleware<{{ context_generic }}>> transitionAllMiddlewares,
        Dictionary<String, List<Event<{{ context_generic }}>>> transitionCallbacks,
        List<NameEvent<{{ context_generic }}>> transitionAllCallbacks,
        Dictionary<{{ state_generic }}, List<Event<{{ context_generic }}>>> stateCallbacks,
        List<StateEvent<{{ state_generic }}, {{ context_generic }}>> stateAllCallbacks,
        IContextJsonAdapter<{{ context_generic }}> contextJsonAdapter
    ) : StaterStateMachine<{{ state_generic }}, {{ context_generic }}>(
        transitions,
        context,
        startState,
        states,
        transitionMiddlewares,
        transitionAllMiddlewares,
        transitionCallbacks,
        transitionAllCallbacks,
        stateCallbacks,
        stateAllCallbacks,
        contextJsonAdapter
    )
    {
    {{- if settings.generate_interface }}
        {{- for item in fsm.transitions }}
        public void {{ item.name }}() 
        {
            Transition("{{ item.name }}");
        }{{- if !for.last }}{{ "\n" }}{{- end }}
        {{- end }}
    }
{{- end }}
    private static StateMachineFactory<{{ state_generic }}, {{ context_generic }}> Typed{{ fsm.name }}Factory = (
        transitionsA,
        contextA,
        startStateA,
        statesA,
        transitionMiddlewaresA,
        transitionAllMiddlewaresA,
        transitionCallbacksA,
        transitionAllCallbacksA,
        stateCallbacksA,
        stateAllCallbacksA,
        contextJsonAdapterA
    ) => new Types{{ fsm.name }}StateMachine(
        transitionsA,
        contextA,
        startStateA,
        statesA,
        transitionMiddlewaresA,
        transitionAllMiddlewaresA,
        transitionCallbacksA,
        transitionAllCallbacksA,
        stateCallbacksA,
        stateAllCallbacksA,
        contextJsonAdapterA
    );


{{ end ~}}
    public static StaterStateMachineBuilder<{{ state_generic }}, {{ context_generic }}> Builder{{ fsm.name }}StateMachine = new StaterStateMachineBuilder<{{ state_generic }}, {{ context_generic }}>()
    {{- if fsm.start_state != null }}
        .SetStartState({{ state fsm.start_state.name }})
    {{- end }}
        .SetContext(new {{ context_generic }}())
    {{- if settings.generate_interface }}
        .SetFactory(Typed{{ fsm.name }}Factory)
    {{- end }}
    {{- for item in fsm.state_transitions }}
        .AddTransition("{{ item.transition.name }}", {{ state item.start_state.name }}, {{ state item.end_state.name }})
    {{- if item.transition.condition && settings.generate_context }}
        .SetTransitionCondition("{{ item.transition.name }}", ctx => {{ convert_condition item.transition item.transition.condition }})
    {{- end }}
    {{- if item.transition.event && settings.generate_context }}
        .SetTransitionEvent("{{ item.transition.name }}", ctx => {{ convert_event item.transition item.transition.event }})
    {{- end }}
    {{- end }};
}
{{- end }}