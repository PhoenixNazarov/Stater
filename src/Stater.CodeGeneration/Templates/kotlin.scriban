{{- if settings.generate_states -}}
enum class States {
    {{- for item in fsm.states }}
    {{ item.name }}{{- if !for.last }}{{ "," }}{{- end }}
    {{- end }}
}

{{ end }}
{{- func state(name) -}}
{{- if settings.generate_states -}}
States.{{ name }}
{{- else -}}
"{{ name }}"
{{- end -}}
{{- end -}}
{{- if settings.generate_context -}}
data class {{ fsm.name }}FSMContext(
{{- for item in fsm.variables }}
    var {{ item.name }}: {{ convert_variable_type item.start_value }} = {{ convert_variable_value item.start_value }}{{- if !for.last }}{{ "," }}{{- end }}
{{- end}}
) : Context

{{ end -}}
{{- if !settings.generate_states; state_generic = "String"; else; state_generic = "States"; end }}
{{- if !settings.generate_context; context_generic = "EmptyContext"; else; context_generic = fsm.name+"FSMContext"; end -}}
{{- if settings.mode == "Clazz" -}}
class {{ fsm.name }}StateMachine : StaterStateMachine<{{ state_generic }}, {{ context_generic }}>(
    transitions = listOf(
    {{- for item in fsm.state_transitions }}
        Transition(
            name = "{{ item.transition.name }}",
            start = {{ state item.start_state.name }},
            end = {{ state item.end_state.name }}
        ){{- if !for.last }}{{ "," }}{{- end }}
    {{- end }}
    ),
    {{- if fsm.start_state != null }}
    startState = {{ state fsm.start_state.name }},
    {{- end }}
    context = {{ context_generic }}()
){{- if settings.generate_interface }} {
  {{- for item in fsm.transitions }}
    fun {{ item.name }}() = transition("{{ item.name }}")
  {{- end }}
}
{{- end }}
{{- else if settings.mode == "Builder" -}}
{{- if settings.generate_interface -}}
class Types{{ fsm.name }}StateMachine(
    transitions: List<Transition<{{ state_generic }}, {{ context_generic }}>>,
    startState: {{ state_generic }},
    states: Set<{{ state_generic }}>,
    context: {{ context_generic }},
    transitionMiddlewares: Map<String, List<TransitionMiddleware<{{ context_generic }}>>> = mapOf(),
    transitionAllMiddlewares: List<TransitionNameMiddleware<{{ context_generic }}>> = listOf(),
    transitionCallbacks: Map<String, List<Event<{{ context_generic }}>>> = mapOf(),
    transitionAllCallbacks: List<NameEvent<{{ context_generic }}>> = listOf(),
    stateCallbacks: Map<{{ state_generic }}, List<Event<{{ context_generic }}>>> = mapOf(),
    stateAllCallbacks: List<StateEvent<{{ state_generic }}, {{ context_generic }}>> = listOf(),
    contextJsonAdapter: ContextJsonAdapter<{{ context_generic }}>? = null,
) : StaterStateMachine<{{ state_generic }}, {{ context_generic }}>(
    transitions = transitions,
    startState = startState,
    states = states,
    context = context,
    transitionMiddlewares = transitionMiddlewares,
    transitionAllMiddlewares = transitionAllMiddlewares,
    transitionCallbacks = transitionCallbacks,
    transitionAllCallbacks = transitionAllCallbacks,
    stateCallbacks = stateCallbacks,
    stateAllCallbacks = stateAllCallbacks,
    contextJsonAdapter = contextJsonAdapter
) {
    fun ajarPlus() = transition("ajarPlus")
    fun ajarMinus() = transition("ajarMinus")
    fun preOpen() = transition("preOpen")
    fun preClose() = transition("preClose")
    fun open() = transition("open")
    fun close() = transition("close")
}

private val typed{{ fsm.name }}Factory: StateMachineFactory<{{ state_generic }}, {{ context_generic }}> = {
        transitionsA,
        contextA,
        startStateA,
        statesA,
        transitionMiddlewaresA,
        transitionAllMiddlewaresA,
        transitionCallbacksA,
        transitionAllCallbacksA,
        stateCallbacksA,
        stateAllCallbacksA,
        contextJsonAdapterA,
    ->
    Types{{ fsm.name }}StateMachine(
        transitions = transitionsA,
        context = contextA,
        startState = startStateA,
        states = statesA,
        transitionMiddlewares = transitionMiddlewaresA,
        transitionAllMiddlewares = transitionAllMiddlewaresA,
        transitionCallbacks = transitionCallbacksA,
        transitionAllCallbacks = transitionAllCallbacksA,
        stateCallbacks = stateCallbacksA,
        stateAllCallbacks = stateAllCallbacksA,
        contextJsonAdapter = contextJsonAdapterA
    )
}

{{ end -}}
val builder{{ fsm.name }}StateMachine = StaterStateMachineBuilder<{{ state_generic }}, {{ context_generic }}>()
    {{- if fsm.start_state != null }}
    .setStartState({{ state fsm.start_state.name }})
    {{- end }}
    .setContext({{ context_generic }}())
    {{- if settings.generate_interface }}
    .setFactory(typed{{ fsm.name }}Factory)
    {{- end }}
    {{- for item in fsm.state_transitions }}
    .addTransition("{{ item.transition.name }}", {{ state item.start_state.name }}, {{ state item.end_state.name }})
    {{- end }}
{{- end }}