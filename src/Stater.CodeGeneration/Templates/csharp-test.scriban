namespace fsm.{{ fsm.name | string.downcase }};

using Newtonsoft.Json.Linq;


{{- func state(name) -}}
{{- if settings.generate_states -}}
States.{{ name }}
{{- else -}}
"{{ name }}"
{{- end -}}
{{- end }}

{{if settings.mode == "Clazz"; build_generic = "new " + fsm.name + "StateMachine()"; else if settings.generate_interface; build_generic = fsm.name + ".Builder" + fsm.name + "StateMachine.Build() as " + fsm.name + ".Types" + fsm.name + "StateMachine"; else; build_generic = fsm.name + ".Builder" + fsm.name + "StateMachine.Build()"; end -}}
[Collection("{{ fsm.name }} Auto Generated Tests")]
public class Test{{ fsm.name }} {
    [Fact]
    private void TestInit() 
    {
        _ = {{ build_generic }};
    }
    
{{ for index in 0..(scenarios.size - 1) }}
    [Fact]
    private void TestScenario{{index}}() 
    {
        var sm = {{ build_generic }};
        sm.DisableEvents();
    
{{ for transition in scenarios[index] }}
        {{- if settings.generate_interface }}
        sm.{{ transition.name }}();
        {{- else }}
        sm.Transition("{{ transition.name }}");
        {{- end }}
        Assert.Equal({{ state get_state_by_uuid(transition.end).name }}, sm.GetState());
{{ end }}
    }
    {{- end }}
    
    [Fact]
    private void TestJsonSchema()
    {
        var sm = {{ build_generic }};
        Assert.Equal(JObject.Parse("""
        {{ state_machine_json_schema fsm }}
        """
        ), JObject.Parse(sm.ToJsonSchema()));
    }
    
{{ if settings.mode == "Builder" && !settings.generate_states }}
    [Fact]
    private void TestSystemAppendStateTransition()
    {
        var smBuilder = {{ fsm.name }}.Builder{{ fsm.name }}StateMachine.Copy();
        
        smBuilder = smBuilder.AddState("__test_state_1__");
        Assert.Equal(JObject.Parse("""
            {{ state_machine_json_schema fsm_test_state_1 }}
        """), JObject.Parse(smBuilder.Build().ToJsonSchema()));
        
        smBuilder = smBuilder.AddState("__test_state_2__");
        Assert.Equal(JObject.Parse("""
            {{ state_machine_json_schema fsm_test_state_2 }}
        """), JObject.Parse(smBuilder.Build().ToJsonSchema()));
        
        smBuilder = smBuilder.AddTransition("__test_transition__", "__test_state_1__", "__test_state_2__");
        Assert.Equal(JObject.Parse("""
            {{ state_machine_json_schema fsm_test_state_3 }}
        """), JObject.Parse(smBuilder.Build().ToJsonSchema()));
    }
    {{- end }}
}