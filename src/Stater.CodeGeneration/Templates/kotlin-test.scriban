package fsm.{{ fsm.name | string.downcase }};

import org.junit.jupiter.api.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue
import com.fasterxml.jackson.databind.ObjectMapper


{{- func state(name) -}}
{{- if settings.generate_states -}}
States.{{ name }}
{{- else -}}
"{{ name }}"
{{- end -}}
{{- end }}

{{if settings.mode == "Clazz"; build_generic = fsm.name + "StateMachine()"; else if settings.generate_interface; build_generic = "builder" + fsm.name + "StateMachine.build() as Types" + fsm.name + "StateMachine"; else; build_generic = "builder" + fsm.name + "StateMachine.build()"; end -}}
class Test{{ fsm.name }} {
    @Test
    fun testInit() {
        {{ build_generic }}
    }
    
{{ for index in 0..(scenarios.size - 1) }}
    @Test
    fun testScenario{{index}}() {
        val sm = {{ build_generic }}
        sm.disableEvents()
    
{{ for transition in scenarios[index] }}
        {{- if settings.generate_interface }}
        sm.{{ transition.name }}()
        {{- else }}
        sm.transition("{{ transition.name }}")
        {{- end }}
        assertEquals(sm.getState(), {{ state get_state_by_uuid(transition.end).name }})
{{ end }}
    }
    {{- end }}
    
    @Test
    fun testJsonSchema() {
        val sm = {{ build_generic }}
        assertEquals(ObjectMapper().readTree("""{{ state_machine_json_schema fsm }}"""), ObjectMapper().readTree(sm.toJsonSchema()))
    }
    
    {{ if settings.mode == "Builder" && !settings.generate_states }}
    @Test
    fun testSystemAppendStateTransition(){
        var smBuilder = builder{{ fsm.name }}StateMachine
        
        smBuilder = smBuilder.addState("__test_state_1__")
        assertEquals(ObjectMapper().readTree("""{{ state_machine_json_schema fsm_test_state_1 }}"""), ObjectMapper().readTree(smBuilder.build().toJsonSchema()))
        
        smBuilder = smBuilder.addState("__test_state_2__")
        assertEquals(ObjectMapper().readTree("""{{ state_machine_json_schema fsm_test_state_2 }}"""), ObjectMapper().readTree(smBuilder.build().toJsonSchema()))
        
        smBuilder = smBuilder.addTransition("__test_transition__", "__test_state_1__", "__test_state_2__")
        assertEquals(ObjectMapper().readTree("""{{ state_machine_json_schema fsm_test_state_3 }}"""), ObjectMapper().readTree(smBuilder.build().toJsonSchema()))
    }
    {{- end }}
}