package fsm.{{ fsm.name | string.downcase }};

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import com.fasterxml.jackson.databind.ObjectMapper;


{{- func state(name) -}}
{{- if settings.generate_states -}}
{{ fsm.name }}.States.{{ name }}
{{- else -}}
"{{ name }}"
{{- end -}}
{{- end }}

{{if settings.mode == "Clazz"; build_generic = "new " + fsm.name + "." + fsm.name + "StateMachine()"; else if settings.generate_interface; build_generic = "(" + fsm.name + ".Types" + fsm.name + "StateMachine)" + fsm.name + ".builder" + fsm.name + "StateMachine.build()"; else; build_generic = fsm.name + ".builder" + fsm.name + "StateMachine.build()"; end -}}
class Test{{ fsm.name }} {
    @Test
    void testInit() {
        var fsm = {{ build_generic }};
    }
    
{{ for index in 0..(scenarios.size - 1) }}
    @Test
    void testScenario{{index}}() {
        var sm = {{ build_generic }};
        sm.disableEvents();
    
{{ for transition in scenarios[index] }}
        {{- if settings.generate_interface }}
        sm.{{ transition.name }}();
        {{- else }}
        sm.transition("{{ transition.name }}");
        {{- end }}
        assertEquals(sm.getState(), {{ state get_state_by_uuid(transition.end).name }});
{{ end }}
    }
    {{- end }}
    
    @Test
    void testJsonSchema() throws Exception {
        var sm = {{ build_generic }};
        assertEquals(new ObjectMapper().readTree("""
        {{ state_machine_json_schema fsm }}
        """
        ), new ObjectMapper().readTree(sm.toJsonSchema()));
    }
    
    {{ if settings.mode == "Builder" && !settings.generate_states }}
    @Test
    void testSystemAppendStateTransition() throws Exception {
        var smBuilder = {{ fsm.name }}.builder{{ fsm.name }}StateMachine;
        
        smBuilder = smBuilder.addState("__test_state_1__");
        assertEquals(new ObjectMapper().readTree("""
        {{ state_machine_json_schema fsm_test_state_1 }}"""), new ObjectMapper().readTree(smBuilder.build().toJsonSchema()));
        
        smBuilder = smBuilder.addState("__test_state_2__");
        assertEquals(new ObjectMapper().readTree("""
        {{ state_machine_json_schema fsm_test_state_2 }}"""), new ObjectMapper().readTree(smBuilder.build().toJsonSchema()));
        
        smBuilder = smBuilder.addTransition("__test_transition__", "__test_state_1__", "__test_state_2__");
        assertEquals(new ObjectMapper().readTree("""
        {{ state_machine_json_schema fsm_test_state_3 }}"""), new ObjectMapper().readTree(smBuilder.build().toJsonSchema()));
    }
    {{- end }}
}