import {builderDoorStateMachine} from "./Door.js";


test('testInit', () => {
    builderDoorStateMachine.build()
})



test('testScenario0', () => {
    const sm = builderDoorStateMachine.build()
    sm.disableEvents()


    sm.transition('preClose')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('close')
    expect(sm.getState()).toBe("CLOSE")

    sm.transition('preOpen')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('ajarPlus')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('open')
    expect(sm.getState()).toBe("OPEN")

})

test('testScenario1', () => {
    const sm = builderDoorStateMachine.build()
    sm.disableEvents()


    sm.transition('preClose')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('ajarPlus')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('close')
    expect(sm.getState()).toBe("CLOSE")

    sm.transition('preOpen')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('open')
    expect(sm.getState()).toBe("OPEN")

})

test('testScenario2', () => {
    const sm = builderDoorStateMachine.build()
    sm.disableEvents()


    sm.transition('preClose')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('close')
    expect(sm.getState()).toBe("CLOSE")

    sm.transition('preOpen')
    expect(sm.getState()).toBe("AJAR")

    sm.transition('open')
    expect(sm.getState()).toBe("OPEN")

})


test('testJsonSchema', () => {
    const sm = builderDoorStateMachine.build()
    expect(JSON.parse(`{
  "states": [
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
}`)).toStrictEqual(JSON.parse(sm.toJsonSchema()))
})


test('testSystemAppendStateTransition', () => {
    let smBuilder = builderDoorStateMachine
    
    smBuilder = smBuilder.addState('__test_state_1__')
    expect(JSON.parse(`{
  "states": [
    "__test_state_1__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
}`)).toStrictEqual(JSON.parse(smBuilder.build().toJsonSchema()))
    
    smBuilder = smBuilder.addState('__test_state_2__')
    expect(JSON.parse(`{
  "states": [
    "__test_state_1__",
    "__test_state_2__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
}`)).toStrictEqual(JSON.parse(smBuilder.build().toJsonSchema()))
    
    smBuilder = smBuilder.addTransition('__test_transition__', '__test_state_1__', '__test_state_2__')
    expect(JSON.parse(`{
  "states": [
    "__test_state_1__",
    "__test_state_2__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "__test_transition__",
      "start": "__test_state_1__",
      "end": "__test_state_2__"
    }
  ]
}`)).toStrictEqual(JSON.parse(smBuilder.build().toJsonSchema()))
})