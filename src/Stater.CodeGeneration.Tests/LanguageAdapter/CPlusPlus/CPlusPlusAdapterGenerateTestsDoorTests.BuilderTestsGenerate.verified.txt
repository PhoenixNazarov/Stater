#include <Door.h>

#include <gtest/gtest.h>



TEST(Door_state_machine_test, test_init) {
    builder_Door_state_machine.build();
}


TEST(Door_state_machine_test, test_scenario_0) {
    const auto sm = builder_Door_state_machine.build();
    sm->disable_events();


    sm->transition("preClose");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("close");
    ASSERT_EQ(sm->get_state(), "CLOSE");

    sm->transition("preOpen");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("ajarPlus");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("open");
    ASSERT_EQ(sm->get_state(), "OPEN");
}

TEST(Door_state_machine_test, test_scenario_1) {
    const auto sm = builder_Door_state_machine.build();
    sm->disable_events();


    sm->transition("preClose");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("ajarPlus");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("close");
    ASSERT_EQ(sm->get_state(), "CLOSE");

    sm->transition("preOpen");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("open");
    ASSERT_EQ(sm->get_state(), "OPEN");
}

TEST(Door_state_machine_test, test_scenario_2) {
    const auto sm = builder_Door_state_machine.build();
    sm->disable_events();


    sm->transition("preClose");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("close");
    ASSERT_EQ(sm->get_state(), "CLOSE");

    sm->transition("preOpen");
    ASSERT_EQ(sm->get_state(), "AJAR");

    sm->transition("open");
    ASSERT_EQ(sm->get_state(), "OPEN");
}

TEST(Door_state_machine_test, test_json_schema) {
    auto sm = builder_Door_state_machine.build();
    ASSERT_EQ(nlohmann::json::parse(R"({
  "states": [
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
})"), nlohmann::json::parse(sm->to_json_schema()));
}

TEST(Door_state_machine_test, test_system_append_state_transition) {
    auto sm_builder = builder_Door_state_machine;
    
    sm_builder = sm_builder.add_state("__test_state_1__");
    ASSERT_EQ(nlohmann::json::parse(R"({
  "states": [
    "__test_state_1__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
})"), nlohmann::json::parse(sm_builder.build()->to_json_schema()));
    
    sm_builder = sm_builder.add_state("__test_state_2__");
    ASSERT_EQ(nlohmann::json::parse(R"({
  "states": [
    "__test_state_1__",
    "__test_state_2__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
})"), nlohmann::json::parse(sm_builder.build()->to_json_schema()));
    
    sm_builder = sm_builder.add_transition("__test_transition__", "__test_state_1__", "__test_state_2__");
    ASSERT_EQ(nlohmann::json::parse(R"({
  "states": [
    "__test_state_1__",
    "__test_state_2__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "__test_transition__",
      "start": "__test_state_1__",
      "end": "__test_state_2__"
    }
  ]
})"), nlohmann::json::parse(sm_builder.build()->to_json_schema()));
}