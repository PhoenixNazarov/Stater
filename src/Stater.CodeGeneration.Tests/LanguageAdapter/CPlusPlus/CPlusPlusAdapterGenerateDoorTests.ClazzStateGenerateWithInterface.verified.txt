#pragma once

#include <stater_state_machine.h>

enum class e_Door_states {
    OPEN,
    AJAR,
    CLOSE
};

inline void to_json(nlohmann::json &j, const e_Door_states &e) {
    switch (e) {
        case e_Door_states::OPEN: j = "OPEN";
            break;
        case e_Door_states::AJAR: j = "AJAR";
            break;
        case e_Door_states::CLOSE: j = "CLOSE";
            break;
    }
}

inline void from_json(const nlohmann::json &j, e_Door_states &e) {
    std::string state_str = j.get<std::string>();

    if (state_str == "OPEN") e = e_Door_states::OPEN;
    else if (state_str == "AJAR") e = e_Door_states::AJAR;
    else if (state_str == "CLOSE") e = e_Door_states::CLOSE;
}

class Door_state_machine : public stater_state_machine<e_Door_states, empty_context> {
public:
    Door_state_machine() : stater_state_machine (
        {
            transition_t<::e_Door_states, empty_context>(
                "preOpen",
                e_Door_states::CLOSE,
                e_Door_states::AJAR, 
                [](empty_context *ctx) { return true; }, 
                [](empty_context *ctx) { }
            ),
            transition_t<::e_Door_states, empty_context>(
                "preClose",
                e_Door_states::OPEN,
                e_Door_states::AJAR, 
                [](empty_context *ctx) { return true; }, 
                [](empty_context *ctx) { }
            ),
            transition_t<::e_Door_states, empty_context>(
                "open",
                e_Door_states::AJAR,
                e_Door_states::OPEN, 
                [](empty_context *ctx) { return true; }, 
                [](empty_context *ctx) { }
            ),
            transition_t<::e_Door_states, empty_context>(
                "close",
                e_Door_states::AJAR,
                e_Door_states::CLOSE, 
                [](empty_context *ctx) { return true; }, 
                [](empty_context *ctx) { }
            ),
            transition_t<::e_Door_states, empty_context>(
                "ajarPlus",
                e_Door_states::AJAR,
                e_Door_states::AJAR, 
                [](empty_context *ctx) { return true; }, 
                [](empty_context *ctx) { }
            ),
            transition_t<::e_Door_states, empty_context>(
                "ajarMinus",
                e_Door_states::AJAR,
                e_Door_states::AJAR, 
                [](empty_context *ctx) { return true; }, 
                [](empty_context *ctx) { }
            )
        },
        new empty_context(),
        e_Door_states::OPEN
    ) {
    }

    void preOpen() {
        transition("preOpen");
    }

    void preClose() {
        transition("preClose");
    }

    void open() {
        transition("open");
    }

    void close() {
        transition("close");
    }

    void ajarPlus() {
        transition("ajarPlus");
    }

    void ajarMinus() {
        transition("ajarMinus");
    }
};