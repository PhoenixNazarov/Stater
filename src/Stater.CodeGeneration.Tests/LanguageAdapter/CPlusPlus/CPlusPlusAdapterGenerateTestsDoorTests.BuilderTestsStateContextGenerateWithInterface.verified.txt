#include <Door.h>

#include <gtest/gtest.h>



TEST(Door_state_machine_test, test_init) {
    const auto st = builder_Door_state_machine.build();
    dynamic_cast<types_Door_state_machine *>(st.get());
}


TEST(Door_state_machine_test, test_scenario_0) {
    const auto st = builder_Door_state_machine.build();
    const auto sm = dynamic_cast<types_Door_state_machine *>(st.get());
    sm->disable_events();


    sm->preClose();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->close();
    ASSERT_EQ(sm->get_state(), e_Door_states::CLOSE);

    sm->preOpen();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->ajarPlus();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->open();
    ASSERT_EQ(sm->get_state(), e_Door_states::OPEN);
}

TEST(Door_state_machine_test, test_scenario_1) {
    const auto st = builder_Door_state_machine.build();
    const auto sm = dynamic_cast<types_Door_state_machine *>(st.get());
    sm->disable_events();


    sm->preClose();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->ajarPlus();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->close();
    ASSERT_EQ(sm->get_state(), e_Door_states::CLOSE);

    sm->preOpen();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->open();
    ASSERT_EQ(sm->get_state(), e_Door_states::OPEN);
}

TEST(Door_state_machine_test, test_scenario_2) {
    const auto st = builder_Door_state_machine.build();
    const auto sm = dynamic_cast<types_Door_state_machine *>(st.get());
    sm->disable_events();


    sm->preClose();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->close();
    ASSERT_EQ(sm->get_state(), e_Door_states::CLOSE);

    sm->preOpen();
    ASSERT_EQ(sm->get_state(), e_Door_states::AJAR);

    sm->open();
    ASSERT_EQ(sm->get_state(), e_Door_states::OPEN);
}

TEST(Door_state_machine_test, test_json_schema) {
    const auto st = builder_Door_state_machine.build();
    auto sm = dynamic_cast<types_Door_state_machine *>(st.get());
    ASSERT_EQ(nlohmann::json::parse(R"({
  "states": [
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
})"), nlohmann::json::parse(sm->to_json_schema()));
}
