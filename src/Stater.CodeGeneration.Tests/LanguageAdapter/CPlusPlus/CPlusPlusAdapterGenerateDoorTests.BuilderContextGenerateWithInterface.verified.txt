#pragma once

#include <stater_state_machine.h>

class Door_context final : context {
public:
    int degreeOfOpening = 0;
    bool closeVariable = true;
    std::string doorName = "asd";
    float floatVariable = 0f;
};

class types_Door_state_machine : public stater_state_machine<std::string, Door_context> {
public:
    types_Door_state_machine(
        const std::vector<transition_t<std::string, Door_context>> &transitions,
        Door_context *context,
        const std::string &start_state,
        const std::unordered_set<std::string> &states,
        const std::unordered_map<std::string, std::vector<transition_middleware<Door_context>>> &transition_middlewares,
        const std::vector<transition_name_middleware<Door_context>> &transition_all_middlewares,
        const std::unordered_map<std::string, std::vector<event<Door_context>>> &transition_callbacks,
        const std::vector<name_event<Door_context>> &transition_all_callbacks,
        const std::unordered_map<std::string, std::vector<event<Door_context>>> &state_callbacks,
        const std::vector<state_event<std::string, Door_context>> &state_all_callbacks,
        const std::shared_ptr<::context_json_adapter<Door_context> > &context_json_adapter
    ) : stater_state_machine(
        transitions,
        context,
        start_state,
        states,
        transition_middlewares,
        transition_all_middlewares,
        transition_callbacks,
        transition_all_callbacks,
        state_callbacks,
        state_all_callbacks,
        context_json_adapter
    ) { 
    }

    void preOpen() {
        transition("preOpen");
    }

    void preClose() {
        transition("preClose");
    }

    void open() {
        transition("open");
    }

    void close() {
        transition("close");
    }

    void ajarPlus() {
        transition("ajarPlus");
    }

    void ajarMinus() {
        transition("ajarMinus");
    }
};

inline state_machine_factory<std::string, Door_context> typed_Door_factory = [](
    const std::vector<transition_t<std::string, Door_context> > &transitions,
    Door_context *context,
    std::string start_state,
    const std::unordered_set<std::string> &states,
    const std::unordered_map<std::string, std::vector<::transition_middleware<Door_context> > > &
    transition_middleware,
    const std::vector<transition_name_middleware<Door_context> > &
    transition_all_middlewares,
    const std::unordered_map<std::string, std::vector<event<Door_context> > > &
    transition_callbacks,
    const std::vector<name_event<Door_context> > &transition_all_callbacks,
    const std::unordered_map<::std::string, std::vector<event<Door_context> > > &state_callbacks,
    const std::vector<state_event<::std::string, Door_context> > &state_all_callbacks,
    const std::shared_ptr<context_json_adapter<Door_context> >& context_json_adapter_) ->
    std::unique_ptr<types_Door_state_machine> {
    return std::make_unique<types_Door_state_machine>(
        transitions, context, start_state, states,
        transition_middleware, transition_all_middlewares,
        transition_callbacks, transition_all_callbacks,
        state_callbacks, state_all_callbacks, context_json_adapter_);
};


inline stater_state_machine_builder<std::string, Door_context> builder_Door_state_machine = stater_state_machine_builder<std::string, Door_context>()
    .set_start_state("OPEN")
    .set_context(new Door_context())
    .set_factory(typed_Door_factory)
    .add_transition("preOpen", "CLOSE", "AJAR")
    .set_transition_event("preOpen", [](Door_context *ctx) { ctx->degreeOfOpening = 1; })
    .add_transition("preClose", "OPEN", "AJAR")
    .set_transition_event("preClose", [](Door_context *ctx) { ctx->degreeOfOpening = 99; })
    .add_transition("open", "AJAR", "OPEN")
    .set_transition_condition("open", [](Door_context *ctx) { return ctx->degreeOfOpening >= 0; })
    .set_transition_event("open", [](Door_context *ctx) { ctx->degreeOfOpening = 100; })
    .add_transition("close", "AJAR", "CLOSE")
    .set_transition_condition("close", [](Door_context *ctx) { return ctx->degreeOfOpening <= 0; })
    .set_transition_event("close", [](Door_context *ctx) { ctx->degreeOfOpening = 0; })
    .add_transition("ajarPlus", "AJAR", "AJAR")
    .set_transition_event("ajarPlus", [](Door_context *ctx) { ctx->degreeOfOpening = ctx->degreeOfOpening + 1; })
    .add_transition("ajarMinus", "AJAR", "AJAR")
    .set_transition_event("ajarMinus", [](Door_context *ctx) { ctx->degreeOfOpening = ctx->degreeOfOpening - 1; });