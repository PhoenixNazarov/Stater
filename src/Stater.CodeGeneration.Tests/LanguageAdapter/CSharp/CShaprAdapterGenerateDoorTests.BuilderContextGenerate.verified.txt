namespace fsm.door;

using Stater.StateMachine.Lib;

public class DoorFSMContext : IContext{
    public int degreeOfOpening = 0;
    public bool closeVariable = true;
    public string doorName = "asd";
    public float floatVariable = 0f;
}

public class Door {
    public static StaterStateMachineBuilder<String, DoorFSMContext> BuilderDoorStateMachine = new StaterStateMachineBuilder<String, DoorFSMContext>()
        .SetStartState("OPEN")
        .SetContext(new DoorFSMContext())
        .AddTransition("preOpen", "CLOSE", "AJAR")
        .SetTransitionEvent("preOpen", ctx => ctx.degreeOfOpening = 1)
        .AddTransition("preClose", "OPEN", "AJAR")
        .SetTransitionEvent("preClose", ctx => ctx.degreeOfOpening = 99)
        .AddTransition("open", "AJAR", "OPEN")
        .SetTransitionCondition("open", ctx => ctx.degreeOfOpening >= 0)
        .SetTransitionEvent("open", ctx => ctx.degreeOfOpening = 100)
        .AddTransition("close", "AJAR", "CLOSE")
        .SetTransitionCondition("close", ctx => ctx.degreeOfOpening <= 0)
        .SetTransitionEvent("close", ctx => ctx.degreeOfOpening = 0)
        .AddTransition("ajarPlus", "AJAR", "AJAR")
        .SetTransitionEvent("ajarPlus", ctx => ctx.degreeOfOpening = ctx.degreeOfOpening + 1)
        .AddTransition("ajarMinus", "AJAR", "AJAR")
        .SetTransitionEvent("ajarMinus", ctx => ctx.degreeOfOpening = ctx.degreeOfOpening - 1);
}