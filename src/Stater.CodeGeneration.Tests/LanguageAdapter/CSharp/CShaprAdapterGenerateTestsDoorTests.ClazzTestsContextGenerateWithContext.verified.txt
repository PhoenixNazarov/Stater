namespace fsm.door;

using Newtonsoft.Json.Linq;

[Collection("Door Auto Generated Tests")]
public class TestDoor {
    [Fact]
    private void TestInit() 
    {
        _ = new DoorStateMachine();
    }
    

    [Fact]
    private void TestScenario0() 
    {
        var sm = new DoorStateMachine();
        sm.DisableEvents();
    

        sm.preClose();
        Assert.Equal("AJAR", sm.GetState());

        sm.close();
        Assert.Equal("CLOSE", sm.GetState());

        sm.preOpen();
        Assert.Equal("AJAR", sm.GetState());

        sm.ajarPlus();
        Assert.Equal("AJAR", sm.GetState());

        sm.open();
        Assert.Equal("OPEN", sm.GetState());

    }
    [Fact]
    private void TestScenario1() 
    {
        var sm = new DoorStateMachine();
        sm.DisableEvents();
    

        sm.preClose();
        Assert.Equal("AJAR", sm.GetState());

        sm.ajarPlus();
        Assert.Equal("AJAR", sm.GetState());

        sm.close();
        Assert.Equal("CLOSE", sm.GetState());

        sm.preOpen();
        Assert.Equal("AJAR", sm.GetState());

        sm.open();
        Assert.Equal("OPEN", sm.GetState());

    }
    [Fact]
    private void TestScenario2() 
    {
        var sm = new DoorStateMachine();
        sm.DisableEvents();
    

        sm.preClose();
        Assert.Equal("AJAR", sm.GetState());

        sm.close();
        Assert.Equal("CLOSE", sm.GetState());

        sm.preOpen();
        Assert.Equal("AJAR", sm.GetState());

        sm.open();
        Assert.Equal("OPEN", sm.GetState());

    }
    
    [Fact]
    private void TestJsonSchema()
    {
        var sm = new DoorStateMachine();
        Assert.Equal(JObject.Parse("""
        {
          "states": [
            "AJAR",
            "CLOSE",
            "OPEN"
          ],
          "startState": "OPEN",
          "transitions": [
            {
              "name": "preOpen",
              "start": "CLOSE",
              "end": "AJAR"
            },
            {
              "name": "preClose",
              "start": "OPEN",
              "end": "AJAR"
            },
            {
              "name": "open",
              "start": "AJAR",
              "end": "OPEN"
            },
            {
              "name": "close",
              "start": "AJAR",
              "end": "CLOSE"
            },
            {
              "name": "ajarPlus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "ajarMinus",
              "start": "AJAR",
              "end": "AJAR"
            }
          ]
        }
        """
        ), JObject.Parse(sm.ToJsonSchema()));
    }
    

}