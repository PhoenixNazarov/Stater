namespace fsm.door;

using Stater.StateMachine.Lib;

public enum States {
    OPEN,
    AJAR,
    CLOSE
}

public class DoorFSMContext : IContext{
    public int degreeOfOpening = 0;
    public bool closeVariable = true;
    public string doorName = "asd";
    public float floatVariable = 0f;
}

public class Door {
    public static StaterStateMachineBuilder<States, DoorFSMContext> BuilderDoorStateMachine = new StaterStateMachineBuilder<States, DoorFSMContext>()
        .SetStartState(States.OPEN)
        .SetContext(new DoorFSMContext())
        .AddTransition("preOpen", States.CLOSE, States.AJAR)
        .SetTransitionEvent("preOpen", ctx => ctx.degreeOfOpening = 1)
        .AddTransition("preClose", States.OPEN, States.AJAR)
        .SetTransitionEvent("preClose", ctx => ctx.degreeOfOpening = 99)
        .AddTransition("open", States.AJAR, States.OPEN)
        .SetTransitionCondition("open", ctx => ctx.degreeOfOpening >= 0)
        .SetTransitionEvent("open", ctx => ctx.degreeOfOpening = 100)
        .AddTransition("close", States.AJAR, States.CLOSE)
        .SetTransitionCondition("close", ctx => ctx.degreeOfOpening <= 0)
        .SetTransitionEvent("close", ctx => ctx.degreeOfOpening = 0)
        .AddTransition("ajarPlus", States.AJAR, States.AJAR)
        .SetTransitionEvent("ajarPlus", ctx => ctx.degreeOfOpening = ctx.degreeOfOpening + 1)
        .AddTransition("ajarMinus", States.AJAR, States.AJAR)
        .SetTransitionEvent("ajarMinus", ctx => ctx.degreeOfOpening = ctx.degreeOfOpening - 1);
}