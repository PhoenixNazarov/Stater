namespace fsm.door;

using Newtonsoft.Json.Linq;

[Collection("Door Auto Generated Tests")]
public class TestDoor {
    [Fact]
    private void TestInit() 
    {
        _ = Door.BuilderDoorStateMachine.Build() as Door.TypesDoorStateMachine;
    }
    

    [Fact]
    private void TestScenario0() 
    {
        var sm = Door.BuilderDoorStateMachine.Build() as Door.TypesDoorStateMachine;
        sm.DisableEvents();
    

        sm.preClose();
        Assert.Equal("AJAR", sm.GetState());

        sm.close();
        Assert.Equal("CLOSE", sm.GetState());

        sm.preOpen();
        Assert.Equal("AJAR", sm.GetState());

        sm.ajarPlus();
        Assert.Equal("AJAR", sm.GetState());

        sm.open();
        Assert.Equal("OPEN", sm.GetState());

    }
    [Fact]
    private void TestScenario1() 
    {
        var sm = Door.BuilderDoorStateMachine.Build() as Door.TypesDoorStateMachine;
        sm.DisableEvents();
    

        sm.preClose();
        Assert.Equal("AJAR", sm.GetState());

        sm.ajarPlus();
        Assert.Equal("AJAR", sm.GetState());

        sm.close();
        Assert.Equal("CLOSE", sm.GetState());

        sm.preOpen();
        Assert.Equal("AJAR", sm.GetState());

        sm.open();
        Assert.Equal("OPEN", sm.GetState());

    }
    [Fact]
    private void TestScenario2() 
    {
        var sm = Door.BuilderDoorStateMachine.Build() as Door.TypesDoorStateMachine;
        sm.DisableEvents();
    

        sm.preClose();
        Assert.Equal("AJAR", sm.GetState());

        sm.close();
        Assert.Equal("CLOSE", sm.GetState());

        sm.preOpen();
        Assert.Equal("AJAR", sm.GetState());

        sm.open();
        Assert.Equal("OPEN", sm.GetState());

    }
    
    [Fact]
    private void TestJsonSchema()
    {
        var sm = Door.BuilderDoorStateMachine.Build() as Door.TypesDoorStateMachine;
        Assert.Equal(JObject.Parse("""
        {
          "states": [
            "AJAR",
            "CLOSE",
            "OPEN"
          ],
          "startState": "OPEN",
          "transitions": [
            {
              "name": "preOpen",
              "start": "CLOSE",
              "end": "AJAR"
            },
            {
              "name": "preClose",
              "start": "OPEN",
              "end": "AJAR"
            },
            {
              "name": "open",
              "start": "AJAR",
              "end": "OPEN"
            },
            {
              "name": "close",
              "start": "AJAR",
              "end": "CLOSE"
            },
            {
              "name": "ajarPlus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "ajarMinus",
              "start": "AJAR",
              "end": "AJAR"
            }
          ]
        }
        """
        ), JObject.Parse(sm.ToJsonSchema()));
    }
    

    [Fact]
    private void TestSystemAppendStateTransition()
    {
        var smBuilder = Door.BuilderDoorStateMachine.Copy();
        
        smBuilder = smBuilder.AddState("__test_state_1__");
        Assert.Equal(JObject.Parse("""
            {
              "states": [
                "__test_state_1__",
                "AJAR",
                "CLOSE",
                "OPEN"
              ],
              "startState": "OPEN",
              "transitions": [
                {
                  "name": "preOpen",
                  "start": "CLOSE",
                  "end": "AJAR"
                },
                {
                  "name": "preClose",
                  "start": "OPEN",
                  "end": "AJAR"
                },
                {
                  "name": "open",
                  "start": "AJAR",
                  "end": "OPEN"
                },
                {
                  "name": "close",
                  "start": "AJAR",
                  "end": "CLOSE"
                },
                {
                  "name": "ajarPlus",
                  "start": "AJAR",
                  "end": "AJAR"
                },
                {
                  "name": "ajarMinus",
                  "start": "AJAR",
                  "end": "AJAR"
                }
              ]
            }
        """), JObject.Parse(smBuilder.Build().ToJsonSchema()));
        
        smBuilder = smBuilder.AddState("__test_state_2__");
        Assert.Equal(JObject.Parse("""
            {
              "states": [
                "__test_state_1__",
                "__test_state_2__",
                "AJAR",
                "CLOSE",
                "OPEN"
              ],
              "startState": "OPEN",
              "transitions": [
                {
                  "name": "preOpen",
                  "start": "CLOSE",
                  "end": "AJAR"
                },
                {
                  "name": "preClose",
                  "start": "OPEN",
                  "end": "AJAR"
                },
                {
                  "name": "open",
                  "start": "AJAR",
                  "end": "OPEN"
                },
                {
                  "name": "close",
                  "start": "AJAR",
                  "end": "CLOSE"
                },
                {
                  "name": "ajarPlus",
                  "start": "AJAR",
                  "end": "AJAR"
                },
                {
                  "name": "ajarMinus",
                  "start": "AJAR",
                  "end": "AJAR"
                }
              ]
            }
        """), JObject.Parse(smBuilder.Build().ToJsonSchema()));
        
        smBuilder = smBuilder.AddTransition("__test_transition__", "__test_state_1__", "__test_state_2__");
        Assert.Equal(JObject.Parse("""
            {
              "states": [
                "__test_state_1__",
                "__test_state_2__",
                "AJAR",
                "CLOSE",
                "OPEN"
              ],
              "startState": "OPEN",
              "transitions": [
                {
                  "name": "preOpen",
                  "start": "CLOSE",
                  "end": "AJAR"
                },
                {
                  "name": "preClose",
                  "start": "OPEN",
                  "end": "AJAR"
                },
                {
                  "name": "open",
                  "start": "AJAR",
                  "end": "OPEN"
                },
                {
                  "name": "close",
                  "start": "AJAR",
                  "end": "CLOSE"
                },
                {
                  "name": "ajarPlus",
                  "start": "AJAR",
                  "end": "AJAR"
                },
                {
                  "name": "ajarMinus",
                  "start": "AJAR",
                  "end": "AJAR"
                },
                {
                  "name": "__test_transition__",
                  "start": "__test_state_1__",
                  "end": "__test_state_2__"
                }
              ]
            }
        """), JObject.Parse(smBuilder.Build().ToJsonSchema()));
    }
}