from stater_state_machine import EmptyContext
from stater_state_machine import StaterStateMachineBuilder


builder_Door_state_machine = (
    StaterStateMachineBuilder[str, EmptyContext]()
    .set_start_state("OPEN")
    .set_context(EmptyContext())
    .add_transition("preOpen", "CLOSE", "AJAR")
    .set_transition_event("preOpen", lambda ctx: setattr(ctx, 'degreeOfOpening', 1))
    .add_transition("preClose", "OPEN", "AJAR")
    .set_transition_event("preClose", lambda ctx: setattr(ctx, 'degreeOfOpening', 99))
    .add_transition("open", "AJAR", "OPEN")
    .set_transition_condition("open", lambda ctx: ctx.degreeOfOpening >= 0)
    .set_transition_event("open", lambda ctx: setattr(ctx, 'degreeOfOpening', 100))
    .add_transition("close", "AJAR", "CLOSE")
    .set_transition_condition("close", lambda ctx: ctx.degreeOfOpening <= 0)
    .set_transition_event("close", lambda ctx: setattr(ctx, 'degreeOfOpening', 0))
    .add_transition("ajarPlus", "AJAR", "AJAR")
    .set_transition_event("ajarPlus", lambda ctx: setattr(ctx, 'degreeOfOpening', ctx.degreeOfOpening + 1))
    .add_transition("ajarMinus", "AJAR", "AJAR")
    .set_transition_event("ajarMinus", lambda ctx: setattr(ctx, 'degreeOfOpening', ctx.degreeOfOpening - 1))
)