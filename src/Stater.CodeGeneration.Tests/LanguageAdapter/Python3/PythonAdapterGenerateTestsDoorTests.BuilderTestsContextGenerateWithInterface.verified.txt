import json

from .Door import builder_Door_state_machine


def test_init():
    builder_Door_state_machine.build()


def test_scenario_0():
    sm = builder_Door_state_machine.build()
    sm.disable_events()


    sm.preClose()
    assert sm.get_state() == "AJAR"

    sm.close()
    assert sm.get_state() == "CLOSE"

    sm.preOpen()
    assert sm.get_state() == "AJAR"

    sm.ajarPlus()
    assert sm.get_state() == "AJAR"

    sm.open()
    assert sm.get_state() == "OPEN"


def test_scenario_1():
    sm = builder_Door_state_machine.build()
    sm.disable_events()


    sm.preClose()
    assert sm.get_state() == "AJAR"

    sm.ajarPlus()
    assert sm.get_state() == "AJAR"

    sm.close()
    assert sm.get_state() == "CLOSE"

    sm.preOpen()
    assert sm.get_state() == "AJAR"

    sm.open()
    assert sm.get_state() == "OPEN"


def test_scenario_2():
    sm = builder_Door_state_machine.build()
    sm.disable_events()


    sm.preClose()
    assert sm.get_state() == "AJAR"

    sm.close()
    assert sm.get_state() == "CLOSE"

    sm.preOpen()
    assert sm.get_state() == "AJAR"

    sm.open()
    assert sm.get_state() == "OPEN"


def test_json_schema():
    sm = builder_Door_state_machine.build()
    assert json.loads("""{
  "states": [
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
}""") == json.loads(sm.to_json_schema())


def test_system_append_state_transition():
    sm_builder = builder_Door_state_machine
    
    sm_builder = sm_builder.add_state('__test_state_1__')
    assert json.loads("""{
  "states": [
    "__test_state_1__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
}""") == json.loads(sm_builder.build().to_json_schema())
    
    sm_builder = sm_builder.add_state('__test_state_2__')
    assert json.loads("""{
  "states": [
    "__test_state_1__",
    "__test_state_2__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    }
  ]
}""") == json.loads(sm_builder.build().to_json_schema())
    
    sm_builder = sm_builder.add_transition('__test_transition__', '__test_state_1__', '__test_state_2__')
    assert json.loads("""{
  "states": [
    "__test_state_1__",
    "__test_state_2__",
    "AJAR",
    "CLOSE",
    "OPEN"
  ],
  "startState": "OPEN",
  "transitions": [
    {
      "name": "preOpen",
      "start": "CLOSE",
      "end": "AJAR"
    },
    {
      "name": "preClose",
      "start": "OPEN",
      "end": "AJAR"
    },
    {
      "name": "open",
      "start": "AJAR",
      "end": "OPEN"
    },
    {
      "name": "close",
      "start": "AJAR",
      "end": "CLOSE"
    },
    {
      "name": "ajarPlus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "ajarMinus",
      "start": "AJAR",
      "end": "AJAR"
    },
    {
      "name": "__test_transition__",
      "start": "__test_state_1__",
      "end": "__test_state_2__"
    }
  ]
}""") == json.loads(sm_builder.build().to_json_schema())