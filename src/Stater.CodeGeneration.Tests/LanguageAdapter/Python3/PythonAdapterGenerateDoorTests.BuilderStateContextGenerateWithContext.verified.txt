from enum import Enum
from pydantic import BaseModel
from stater_state_machine import Context
from stater_state_machine import StaterStateMachine
from stater_state_machine import StaterStateMachineBuilder


class States(Enum):
    OPEN = "OPEN"
    AJAR = "AJAR"
    CLOSE = "CLOSE"
    

class DoorFSMContext(BaseModel, Context):
    degreeOfOpening: int = 0
    closeVariable: bool = True
    doorName: str = "asd"
    floatVariable: float = 0


class TypesDoorStateMachine(StaterStateMachine[States, DoorFSMContext]):
    def preOpen(self):
        self.transition("preOpen")
    
    def preClose(self):
        self.transition("preClose")
    
    def open(self):
        self.transition("open")
    
    def close(self):
        self.transition("close")
    
    def ajarPlus(self):
        self.transition("ajarPlus")
    
    def ajarMinus(self):
        self.transition("ajarMinus")


def typed_Door_factory(*args, **kwargs):
    return TypesDoorStateMachine(*args, **kwargs)


builder_Door_state_machine = (
    StaterStateMachineBuilder[States, DoorFSMContext]()
    .set_start_state(States.OPEN)
    .set_context(DoorFSMContext())
    .set_factory(typed_Door_factory)
    .add_transition("preOpen", States.CLOSE, States.AJAR)
    .set_transition_event("preOpen", lambda ctx: setattr(ctx, 'degreeOfOpening', 1))
    .add_transition("preClose", States.OPEN, States.AJAR)
    .set_transition_event("preClose", lambda ctx: setattr(ctx, 'degreeOfOpening', 99))
    .add_transition("open", States.AJAR, States.OPEN)
    .set_transition_condition("open", lambda ctx: ctx.degreeOfOpening >= 0)
    .set_transition_event("open", lambda ctx: setattr(ctx, 'degreeOfOpening', 100))
    .add_transition("close", States.AJAR, States.CLOSE)
    .set_transition_condition("close", lambda ctx: ctx.degreeOfOpening <= 0)
    .set_transition_event("close", lambda ctx: setattr(ctx, 'degreeOfOpening', 0))
    .add_transition("ajarPlus", States.AJAR, States.AJAR)
    .set_transition_event("ajarPlus", lambda ctx: setattr(ctx, 'degreeOfOpening', ctx.degreeOfOpening + 1))
    .add_transition("ajarMinus", States.AJAR, States.AJAR)
    .set_transition_event("ajarMinus", lambda ctx: setattr(ctx, 'degreeOfOpening', ctx.degreeOfOpening - 1))
)