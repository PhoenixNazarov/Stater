from stater_state_machine import EmptyContext
from stater_state_machine import StaterStateMachine
from stater_state_machine import Transition


class DoorStateMachine(StaterStateMachine[str, EmptyContext]):
    def __init__(self):
        super().__init__(
            transitions=[
                Transition(
                    name="preOpen",
                    start="CLOSE",
                    end="AJAR",
                    event=lambda ctx: setattr(ctx, 'degreeOfOpening', 1)
                ),
                Transition(
                    name="preClose",
                    start="OPEN",
                    end="AJAR",
                    event=lambda ctx: setattr(ctx, 'degreeOfOpening', 99)
                ),
                Transition(
                    name="open",
                    start="AJAR",
                    end="OPEN",
                    condition=lambda ctx: ctx.degreeOfOpening >= 0,
                    event=lambda ctx: setattr(ctx, 'degreeOfOpening', 100)
                ),
                Transition(
                    name="close",
                    start="AJAR",
                    end="CLOSE",
                    condition=lambda ctx: ctx.degreeOfOpening <= 0,
                    event=lambda ctx: setattr(ctx, 'degreeOfOpening', 0)
                ),
                Transition(
                    name="ajarPlus",
                    start="AJAR",
                    end="AJAR",
                    event=lambda ctx: setattr(ctx, 'degreeOfOpening', ctx.degreeOfOpening + 1)
                ),
                Transition(
                    name="ajarMinus",
                    start="AJAR",
                    end="AJAR",
                    event=lambda ctx: setattr(ctx, 'degreeOfOpening', ctx.degreeOfOpening - 1)
                )
            ],
            context=EmptyContext(),
            start_state="OPEN",
        )

    def preOpen(self):
        self.transition("preOpen")

    def preClose(self):
        self.transition("preClose")

    def open(self):
        self.transition("open")

    def close(self):
        self.transition("close")

    def ajarPlus(self):
        self.transition("ajarPlus")

    def ajarMinus(self):
        self.transition("ajarMinus")