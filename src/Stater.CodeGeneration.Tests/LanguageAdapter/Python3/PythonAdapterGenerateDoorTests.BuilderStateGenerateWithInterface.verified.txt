from enum import Enum
from stater_state_machine import EmptyContext
from stater_state_machine import StaterStateMachine
from stater_state_machine import StaterStateMachineBuilder


class States(Enum):
    OPEN = "OPEN"
    AJAR = "AJAR"
    CLOSE = "CLOSE"
    


class TypesDoorStateMachine(StaterStateMachine[States, EmptyContext]):
    def preOpen(self):
        self.transition("preOpen")
    
    def preClose(self):
        self.transition("preClose")
    
    def open(self):
        self.transition("open")
    
    def close(self):
        self.transition("close")
    
    def ajarPlus(self):
        self.transition("ajarPlus")
    
    def ajarMinus(self):
        self.transition("ajarMinus")


def typed_Door_factory(*args, **kwargs):
    return TypesDoorStateMachine(*args, **kwargs)


builder_Door_state_machine = (
    StaterStateMachineBuilder[States, EmptyContext]()
    .set_start_state(States.OPEN)
    .set_context(EmptyContext())
    .set_factory(typed_Door_factory)
    .add_transition("preOpen", States.CLOSE, States.AJAR)
    .add_transition("preClose", States.OPEN, States.AJAR)
    .add_transition("open", States.AJAR, States.OPEN)
    .add_transition("close", States.AJAR, States.CLOSE)
    .add_transition("ajarPlus", States.AJAR, States.AJAR)
    .add_transition("ajarMinus", States.AJAR, States.AJAR)
)