package fsm.door;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import com.fasterxml.jackson.databind.ObjectMapper;

class TestDoor {
    @Test
    void testInit() {
        var fsm = new Door.DoorStateMachine();
    }
    

    @Test
    void testScenario0() {
        var sm = new Door.DoorStateMachine();
        sm.disableEvents();
    

        sm.preClose();
        assertEquals(sm.getState(), "AJAR");

        sm.close();
        assertEquals(sm.getState(), "CLOSE");

        sm.preOpen();
        assertEquals(sm.getState(), "AJAR");

        sm.ajarPlus();
        assertEquals(sm.getState(), "AJAR");

        sm.open();
        assertEquals(sm.getState(), "OPEN");

    }
    @Test
    void testScenario1() {
        var sm = new Door.DoorStateMachine();
        sm.disableEvents();
    

        sm.preClose();
        assertEquals(sm.getState(), "AJAR");

        sm.ajarPlus();
        assertEquals(sm.getState(), "AJAR");

        sm.close();
        assertEquals(sm.getState(), "CLOSE");

        sm.preOpen();
        assertEquals(sm.getState(), "AJAR");

        sm.open();
        assertEquals(sm.getState(), "OPEN");

    }
    @Test
    void testScenario2() {
        var sm = new Door.DoorStateMachine();
        sm.disableEvents();
    

        sm.preClose();
        assertEquals(sm.getState(), "AJAR");

        sm.close();
        assertEquals(sm.getState(), "CLOSE");

        sm.preOpen();
        assertEquals(sm.getState(), "AJAR");

        sm.open();
        assertEquals(sm.getState(), "OPEN");

    }
    
    @Test
    void testJsonSchema() throws Exception {
        var sm = new Door.DoorStateMachine();
        assertEquals(new ObjectMapper().readTree("""
        {
          "states": [
            "AJAR",
            "CLOSE",
            "OPEN"
          ],
          "startState": "OPEN",
          "transitions": [
            {
              "name": "preOpen",
              "start": "CLOSE",
              "end": "AJAR"
            },
            {
              "name": "preClose",
              "start": "OPEN",
              "end": "AJAR"
            },
            {
              "name": "open",
              "start": "AJAR",
              "end": "OPEN"
            },
            {
              "name": "close",
              "start": "AJAR",
              "end": "CLOSE"
            },
            {
              "name": "ajarPlus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "ajarMinus",
              "start": "AJAR",
              "end": "AJAR"
            }
          ]
        }
        """
        ), new ObjectMapper().readTree(sm.toJsonSchema()));
    }
    
    
}