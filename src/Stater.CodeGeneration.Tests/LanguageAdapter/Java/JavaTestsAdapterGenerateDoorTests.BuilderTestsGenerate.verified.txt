package fsm.door;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import com.fasterxml.jackson.databind.ObjectMapper;

class TestDoor {
    @Test
    void testInit() {
        var fsm = Door.builderDoorStateMachine.build();
    }
    

    @Test
    void testScenario0() {
        var sm = Door.builderDoorStateMachine.build();
        sm.disableEvents();
    

        sm.transition("preClose");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("close");
        assertEquals(sm.getState(), "CLOSE");

        sm.transition("preOpen");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("ajarPlus");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("open");
        assertEquals(sm.getState(), "OPEN");

    }
    @Test
    void testScenario1() {
        var sm = Door.builderDoorStateMachine.build();
        sm.disableEvents();
    

        sm.transition("preClose");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("ajarPlus");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("close");
        assertEquals(sm.getState(), "CLOSE");

        sm.transition("preOpen");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("open");
        assertEquals(sm.getState(), "OPEN");

    }
    @Test
    void testScenario2() {
        var sm = Door.builderDoorStateMachine.build();
        sm.disableEvents();
    

        sm.transition("preClose");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("close");
        assertEquals(sm.getState(), "CLOSE");

        sm.transition("preOpen");
        assertEquals(sm.getState(), "AJAR");

        sm.transition("open");
        assertEquals(sm.getState(), "OPEN");

    }
    
    @Test
    void testJsonSchema() throws Exception {
        var sm = Door.builderDoorStateMachine.build();
        assertEquals(new ObjectMapper().readTree("""
        {
          "states": [
            "AJAR",
            "CLOSE",
            "OPEN"
          ],
          "startState": "OPEN",
          "transitions": [
            {
              "name": "preOpen",
              "start": "CLOSE",
              "end": "AJAR"
            },
            {
              "name": "preClose",
              "start": "OPEN",
              "end": "AJAR"
            },
            {
              "name": "open",
              "start": "AJAR",
              "end": "OPEN"
            },
            {
              "name": "close",
              "start": "AJAR",
              "end": "CLOSE"
            },
            {
              "name": "ajarPlus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "ajarMinus",
              "start": "AJAR",
              "end": "AJAR"
            }
          ]
        }
        """
        ), new ObjectMapper().readTree(sm.toJsonSchema()));
    }
    
    
        @Test
        void testSystemAppendStateTransition() throws Exception {
            var smBuilder = Door.builderDoorStateMachine;
            
            smBuilder = smBuilder.addState("__test_state_1__");
            assertEquals(new ObjectMapper().readTree("""
            {
          "states": [
            "__test_state_1__",
            "AJAR",
            "CLOSE",
            "OPEN"
          ],
          "startState": "OPEN",
          "transitions": [
            {
              "name": "preOpen",
              "start": "CLOSE",
              "end": "AJAR"
            },
            {
              "name": "preClose",
              "start": "OPEN",
              "end": "AJAR"
            },
            {
              "name": "open",
              "start": "AJAR",
              "end": "OPEN"
            },
            {
              "name": "close",
              "start": "AJAR",
              "end": "CLOSE"
            },
            {
              "name": "ajarPlus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "ajarMinus",
              "start": "AJAR",
              "end": "AJAR"
            }
          ]
        }"""), new ObjectMapper().readTree(smBuilder.build().toJsonSchema()));
            
            smBuilder = smBuilder.addState("__test_state_2__");
            assertEquals(new ObjectMapper().readTree("""
            {
          "states": [
            "__test_state_1__",
            "__test_state_2__",
            "AJAR",
            "CLOSE",
            "OPEN"
          ],
          "startState": "OPEN",
          "transitions": [
            {
              "name": "preOpen",
              "start": "CLOSE",
              "end": "AJAR"
            },
            {
              "name": "preClose",
              "start": "OPEN",
              "end": "AJAR"
            },
            {
              "name": "open",
              "start": "AJAR",
              "end": "OPEN"
            },
            {
              "name": "close",
              "start": "AJAR",
              "end": "CLOSE"
            },
            {
              "name": "ajarPlus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "ajarMinus",
              "start": "AJAR",
              "end": "AJAR"
            }
          ]
        }"""), new ObjectMapper().readTree(smBuilder.build().toJsonSchema()));
            
            smBuilder = smBuilder.addTransition("__test_transition__", "__test_state_1__", "__test_state_2__");
            assertEquals(new ObjectMapper().readTree("""
            {
          "states": [
            "__test_state_1__",
            "__test_state_2__",
            "AJAR",
            "CLOSE",
            "OPEN"
          ],
          "startState": "OPEN",
          "transitions": [
            {
              "name": "preOpen",
              "start": "CLOSE",
              "end": "AJAR"
            },
            {
              "name": "preClose",
              "start": "OPEN",
              "end": "AJAR"
            },
            {
              "name": "open",
              "start": "AJAR",
              "end": "OPEN"
            },
            {
              "name": "close",
              "start": "AJAR",
              "end": "CLOSE"
            },
            {
              "name": "ajarPlus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "ajarMinus",
              "start": "AJAR",
              "end": "AJAR"
            },
            {
              "name": "__test_transition__",
              "start": "__test_state_1__",
              "end": "__test_state_2__"
            }
          ]
        }"""), new ObjectMapper().readTree(smBuilder.build().toJsonSchema()));
        }
}