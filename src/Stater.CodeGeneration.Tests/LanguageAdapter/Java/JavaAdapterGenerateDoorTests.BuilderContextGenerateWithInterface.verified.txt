package fsm.door;

import com.stater.statemachine.java.*;
import java.util.*;

class Door {
    static class DoorFSMContext implements Context{
        int degreeOfOpening = 0;
        boolean closeVariable = true;
        String doorName = "asd";
        float floatVariable = 0f;
    }

    static class TypesDoorStateMachine extends StaterStateMachine<String, DoorFSMContext> {
        public TypesDoorStateMachine(
                List<Transition<String, DoorFSMContext>> transitions,
                DoorFSMContext context,
                String startState,
                Set<String> states,
                Map<String, List<TransitionMiddleware<DoorFSMContext>>> transitionMiddlewares,
                List<TransitionNameMiddleware<DoorFSMContext>> transitionAllMiddlewares,
                Map<String, List<Event<DoorFSMContext>>> transitionCallbacks,
                List<NameEvent<DoorFSMContext>> transitionAllCallbacks,
                Map<String, List<Event<DoorFSMContext>>> stateCallbacks,
                List<StateEvent<String, DoorFSMContext>> stateAllCallbacks,
                ContextJsonAdapter<DoorFSMContext> contextJsonAdapter
        ) {
            super(
                transitions,
                context,
                startState,
                states,
                transitionMiddlewares,
                transitionAllMiddlewares,
                transitionCallbacks,
                transitionAllCallbacks,
                stateCallbacks,
                stateAllCallbacks,
                contextJsonAdapter
            );
        }
    
        void preOpen() {
            transition("preOpen");
        }
    
        void preClose() {
            transition("preClose");
        }
    
        void open() {
            transition("open");
        }
    
        void close() {
            transition("close");
        }
    
        void ajarPlus() {
            transition("ajarPlus");
        }
    
        void ajarMinus() {
            transition("ajarMinus");
        }
    }

    static private final StateMachineFactory<String, DoorFSMContext> typedDoorFactory = TypesDoorStateMachine::new;


    static public final StaterStateMachineBuilder<String, DoorFSMContext> builderDoorStateMachine = new StaterStateMachineBuilder<String, DoorFSMContext>()
        .setStartState("OPEN")
        .setContext(new DoorFSMContext())
        .setFactory(typedDoorFactory)
        .addTransition("preOpen", "CLOSE", "AJAR")
        .setTransitionEvent("preOpen", ctx -> ctx.degreeOfOpening = 1)
        .addTransition("preClose", "OPEN", "AJAR")
        .setTransitionEvent("preClose", ctx -> ctx.degreeOfOpening = 99)
        .addTransition("open", "AJAR", "OPEN")
        .setTransitionCondition("open", ctx -> ctx.degreeOfOpening >= 0)
        .setTransitionEvent("open", ctx -> ctx.degreeOfOpening = 100)
        .addTransition("close", "AJAR", "CLOSE")
        .setTransitionCondition("close", ctx -> ctx.degreeOfOpening <= 0)
        .setTransitionEvent("close", ctx -> ctx.degreeOfOpening = 0)
        .addTransition("ajarPlus", "AJAR", "AJAR")
        .setTransitionEvent("ajarPlus", ctx -> ctx.degreeOfOpening = ctx.degreeOfOpening + 1)
        .addTransition("ajarMinus", "AJAR", "AJAR")
        .setTransitionEvent("ajarMinus", ctx -> ctx.degreeOfOpening = ctx.degreeOfOpening - 1);
}